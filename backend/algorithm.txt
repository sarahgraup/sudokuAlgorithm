
Sudoku is a puzzle where you need to place numbers 1-9 into a 9x9 grid 
consisting of 9 3x3 boxes[7], following these rules:

Each row contains all of the numbers 1-9
Each column contains all of the numbers 1-9
Each of the 3x3 boxes contains all of the numbers 1-9
We can also restate this rules as:

No row contains duplicate numbers
No column contains duplicate numbers
No 3x3 box contains duplicate numbers


rules:
no row contains duplicate numbers
no column contains duplicate numbers
none of the 3x3 boxes contain duplicate numbers
each position contains exactly one number


can linearize the three dimensions into one and get number of var 
as r * 9 * 9 + c * 9 + v

where r is row, c is column, and v is value

create variable for each position 

need to be able to determine poisitions value 
value to specific variable is value of given position


sudoku can be seen as x where all variables are set to true and "." is a
posiition where no variables are set to true 

simple backtracking:

1. Pick a variable without an assigned truth value. If there are none, return SAT.
2, Assign it a truth-value (true/false).
3. Check if all clauses in our formula are still potentially satisfiable.
    If they are, go to 1.
    If they are not satisfiable, go to 2 and pick the other truth-value.
    If they are not satisfiable, and both truth-values have been tried, backtrack.
    If there is nowhere to backtrack, return UNSAT.

now lets improve this shit::::

check for unsatisfiable clauses in step 3
positive literal and negative literanl
positive if it evaluates to true given its variable truth value and neg otherwise
after step 2 take all clauses that contain literal of variable selected and update accordingly

Pick a variable without an assigned truth value. If there are none, return SAT.
Assign it a truth-value (true/false).
Remove all clauses with positive literals of the variable assignment.
Remove all negative literals of the variable assignment.
Check if an empty clause was created.
If it was, try the other truth-value or backtrack.
If it was not, go to 1.

Pick a variable without an assigned truth value. If there are none, return SAT.
Assign it a truth-value (true/false).
Remove all clauses with positive literals of the variable assignment.
Remove all negative literals of the variable assignment.
Keep performing unit propagation and pure literal elimination while possible.
Check if an empty clause was created.
If it was, try the other truth-value or backtrack.
If it was not, go to 1.


Basic Davis Putnam backtrack

while (true) {
 if (!decide()) // if no unassigned variable
 return(satisifiable); //the number works there 
 while (!bcp()) {
 if (!resolveConflict())
return(not satisfiable);
 }
}
bool resolveConflict() {
 d = most recent decision not ‘tried both
ways’;
 if (d == NULL) // no such d was found
 return false;

 flip the value of d;
 mark d as tried both ways;
 undo any invalidated implications;
 return true;
}

decide is to select a variable that it not currently assigned and give it a value
this variable is referred to as decisionas
as each new decision is made a record of that decision is pushed on decisiion stack
it will return false if no unassigned variables remain and true otherwise

bcp: carries out boolean contrainst propogration
identify any variable assignmernts required by the current variable stat to satisfuy. 
keeps going until returns true or if conflict returns false. 
at same time, decision is made, some vartiable state exists and is represented by decision stack




create sudoku thing database and solutions

code rule checker

